@page "/employees/actors"
@using Tema1PS.Presenter
@inject IEmployeeGUI<ActorDTO> ActorPresenter

@rendermode InteractiveServer

<PageTitle>Actors</PageTitle>

<h1>Actors</h1>

@if (actors == null)
{
    <p>Loading actors...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var actor in actors)
            {
                <tr>
                    <td>@actor.Id</td>
                    <td>
                        @if (editingActorId == actor.Id)
                        {
                            <input @bind="editingActorName" />
                        }
                        else
                        {
                            @actor.Name
                        }
                    </td>
                    <td>
                        @if (editingActorId == actor.Id)
                        {
                            <button class="btn btn-success" @onclick="() => SaveEdit(actor.Id)">Save</button>
                            <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        }
                        else
                        {
                            <button class="btn btn-warning" @onclick="() => EditActor(actor.Id, actor.Name)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteActor(actor.Id)">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<h3>Add New Actor</h3>
<div>
    <input @bind="newActorName" placeholder="Enter actor name" />
    <button class="btn btn-primary" @onclick="AddActor">Add</button>
</div>

@code {
    private List<ActorDTO> actors = new();
    private string newActorName = string.Empty;
    private int editingActorId = 0;
    private string editingActorName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadActors();
    }

    private async Task LoadActors()
    {
        actors = await ActorPresenter.GetEmployeesAsync();
    }

    private async Task AddActor()
    {
        Console.WriteLine("Add button clicked");
        if (!string.IsNullOrWhiteSpace(newActorName))
        {
            await ActorPresenter.AddEmployeeAsync(newActorName);
            newActorName = string.Empty;
            await LoadActors();
        }
    }

    private void EditActor(int id, string name)
    {
        editingActorId = id;
        editingActorName = name;
    }

    private async Task SaveEdit(int id)
    {
        if (!string.IsNullOrWhiteSpace(editingActorName))
        {
            await ActorPresenter.UpdateEmployeeAsync(id, editingActorName);
            editingActorId = 0;
            await LoadActors();
        }
    }

    private void CancelEdit()
    {
        editingActorId = 0;
    }

    private async Task DeleteActor(int id)
    {
        await ActorPresenter.DeleteEmployeeAsync(id);
        await LoadActors();
    }
}
