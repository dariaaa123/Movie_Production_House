@page "/employees/actors"
@using Tema1PS.Presenter
@inject ActorPresenter ActorPresenter
@implements IEmployeeGUI
@rendermode InteractiveServer

<PageTitle>Actors</PageTitle>

<h1>Actors</h1>

@if (actors == null)
{
    <p>Loading actors...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var actor in actors)
            {
                <tr>
                    <td>@actor.Id</td>
                    <td>
                        @if (editingActorId == actor.Id)
                        {
                            <input @bind="editingActorName" />
                        }
                        else
                        {
                            @actor.Name
                        }
                    </td>
                    <td>
                        @if (editingActorId == actor.Id)
                        {
                            <button class="btn btn-success" @onclick="() => SaveEdit(actor.Id)">Save</button>
                            <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        }
                        else
                        {
                            <button class="btn btn-warning" @onclick="() => EditActor(actor.Id, actor.Name)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteActor(actor.Id)">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<h3>Add New Actor</h3>
<div>
    <input @bind="newActorName" placeholder="Enter actor name" />
    <button class="btn btn-primary" @onclick="AddActor">Add</button>
</div>

@code {
    private List<ActorDTO> actors = new();

    private int actorID = 0;
    private string actorName = string.Empty;
    
    private string newActorName = string.Empty;
    private int newActorId = 0;
    
    private int editingActorId = 0;
    private string editingActorName = string.Empty;

    private int deletingActorId = 0;
    private string deletingActorName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ActorPresenter.SetEmployeeGUI(this); // Ensure this is set so that the presenter knows about the UI
        await LoadActors(); // Load the actors when the page initializes
    }


    private async Task LoadActors()
    {
        actors = await ActorPresenter.GetActorsAsync();
    }

    private async Task AddActor()
    {
        Console.WriteLine("Add button clicked");
        if (!string.IsNullOrWhiteSpace(newActorName))
        {
            await ActorPresenter.AddActorAsync();
            //newActorName = string.Empty;
            await LoadActors();
        }
    }

    private void EditActor(int id, string name)
    {
        editingActorId = id;
        editingActorName = name;
            //await LoadActors();
    }

    private async Task SaveEdit(int id)
    {
        actorID = id;  // Set the correct ID before calling the update
        actorName = editingActorName;  // Set the correct new name
        
        await ActorPresenter.UpdateActorAsync();  // Now it will read the correct data
        editingActorId = 0;  // Reset editing state
        await LoadActors();   // Refresh the actor list
    }

    private void CancelEdit()
    {
        editingActorId = 0;
    }

    private async Task DeleteActor(int id)
    {
        deletingActorId = id;
        await ActorPresenter.DeleteActorAsync();
        await LoadActors();
    }
    
    
    public int GetEmployeeId() => actorID;
    public string GetEmployeeName() => actorName;
    public string GetNewEmployeeName() => newActorName;
    public int GetNewEmployeeId() => newActorId;
    public int GetDeletingEmployeeId() => deletingActorId;
    public string GetDeletingEmployeeName() => deletingActorName;

}