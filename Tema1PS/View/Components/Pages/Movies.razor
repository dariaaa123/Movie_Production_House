@page "/movies"
@using Tema1PS.Presenter
@implements IMovieGUI
@inject MoviePresenter MoviePresenter
@rendermode InteractiveServer

<h1>Movies</h1>

@if (movies == null)
{
    <p>Loading movies...</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
      
            <th>Title</th>
            <th>Year</th>
            <th>Category</th>
            <th>Type</th>
            <th>Director</th>
            <th>Screenwriter</th>
            <th>Actors</th>
            <th>Photos</th> 
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var movie in movies)
        {
            <tr>
                
                <td>@movie.Title</td>
                <td>@movie.Year</td>
                <td>@movie.Category</td>
                <td>@movie.Type</td>
                <td>@movie.DirectorName</td>
                <td>@movie.ScreenWriterName</td>
                <td>@string.Join(", ", movie.ActorNames)</td>
              
                
                <td>
                    <button class="btn btn-info" @onclick="() => ShowPhotos(movie)">See Photos</button>
                </td>
                <td>
                    <button class="btn btn-warning" @onclick="() => EditMovie(movie)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteMovie(movie.Id)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<!-- Modal to display the images -->
@if (selectedMovie != null)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="modal">
            <h3>@selectedMovie.Title - Photos</h3>
            <div class="modal-body">
                <div class="image-container">
                    @if (selectedMovie.GetImageList().Any())
                    {
                        @foreach (var imageUrl in selectedMovie.GetImageList())
                        {
                            <p>@imageUrl</p> <!-- Debugging output -->
                            <img src="@imageUrl" alt="Movie Image" class="movie-image"/>
                        }
                    }
                    else
                    {
                        <p>No photos available.</p>
                    }
                </div>
            </div>
            <button class="btn btn-secondary" @onclick="CloseModal">Close</button>
        </div>
    </div>
}


<h3>@(editingMovieId == 0 ? "Add New Movie" : "Edit Movie")</h3>
<div>
    <input @bind="newMovieTitle" placeholder="Enter movie title" />
    <input type="number" @bind="newMovieYear" placeholder="Enter year" />
    <input @bind="newMovieCategory" placeholder="Enter category" />
    <input @bind="newMovieType" placeholder="Enter type" />
    <input type="number" @bind="newMovieDirectorId" placeholder="Enter director ID" />
    <input type="number" @bind="newMovieScreenWriterId" placeholder="Enter screenwriter ID" />
    <input @bind="newMovieActorIds" placeholder="Enter actor IDs (comma-separated)" />


    <input @bind="newMovieImageUrl1" placeholder="Enter first image URL" />
    <input @bind="newMovieImageUrl2" placeholder="Enter second image URL" />
    <input @bind="newMovieImageUrl3" placeholder="Enter third image URL" />

    @if (editingMovieId == 0)
    {
        <button class="btn btn-primary ml-3" @onclick="AddMovie">Add</button>
    }
    else
    {
        <button class="btn btn-success" @onclick="UpdateMovie">Update</button>
        <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
    }
</div>

@code {
    private List<MovieDTO> movies = new();
    private MovieDTO selectedMovie = null;

    private string newMovieTitle = string.Empty;
    private string newMovieCategory = string.Empty;
    private string newMovieType = string.Empty;
    private int newMovieYear;
    private int newMovieDirectorId;
    private int newMovieScreenWriterId;
    private string newMovieActorIds = string.Empty;

    private string newMovieImageUrl1 = string.Empty;
    private string newMovieImageUrl2 = string.Empty;
    private string newMovieImageUrl3 = string.Empty;

    private int editingMovieId = 0;
    private int deletingMovieId = 0;

    protected override async Task OnInitializedAsync()
    {
        MoviePresenter.SetMovieGUI(this);
        await LoadMovies();
    }

    private async Task LoadMovies()
    {
        movies = await MoviePresenter.GetMoviesAsync();

        foreach (var movie in movies)
        {
            movie.Photo1 = string.IsNullOrEmpty(movie.Photo1) ? "path_to_default_image.jpg" : movie.Photo1;
            movie.Photo2 = string.IsNullOrEmpty(movie.Photo2) ? "path_to_default_image.jpg" : movie.Photo2;
            movie.Photo3 = string.IsNullOrEmpty(movie.Photo3) ? "path_to_default_image.jpg" : movie.Photo3;
        }
    }

    private async Task AddMovie()
    {
        await MoviePresenter.AddMovieAsync();
        await LoadMovies();
        ResetFields();
    }

    private void EditMovie(MovieDTO movie)
    {
        editingMovieId = movie.Id;
        newMovieTitle = movie.Title;
        newMovieYear = movie.Year;
        newMovieCategory = movie.Category;
        newMovieType = movie.Type;
        newMovieDirectorId = movie.DirectorId;
        newMovieScreenWriterId = movie.ScreenWriterId;
        newMovieActorIds = string.Join(", ", movie.ActorIds);

        
        var images = movie.GetImageList();
        newMovieImageUrl1 = images.Count > 0 ? images[0] : string.Empty;
        newMovieImageUrl2 = images.Count > 1 ? images[1] : string.Empty;
        newMovieImageUrl3 = images.Count > 2 ? images[2] : string.Empty;
    }

    private async Task UpdateMovie()
    {
        await MoviePresenter.UpdateMovieAsync();
        await LoadMovies();
        ResetFields();
    }

    private async Task DeleteMovie(int id)
    {
        deletingMovieId = id;
        await MoviePresenter.DeleteMovieAsync();
        await LoadMovies();
    }

    private void CancelEdit()
    {
        ResetFields();
    }

    private void ResetFields()
    {
        deletingMovieId = 0;
        editingMovieId = 0;
        newMovieTitle = string.Empty;
        newMovieYear = 0;
        newMovieCategory = string.Empty;
        newMovieType = string.Empty;
        newMovieDirectorId = 0;
        newMovieScreenWriterId = 0;
        newMovieActorIds = string.Empty;
        newMovieImageUrl1 = string.Empty;
        newMovieImageUrl2 = string.Empty;
        newMovieImageUrl3 = string.Empty;
    }

  
    private void ShowPhotos(MovieDTO movie)
    {
        selectedMovie = movie;
    }

  
    private void CloseModal()
    {
        selectedMovie = null;
    }

    // IMovieGUI Implementation

    public int GetMovieId() => editingMovieId;
    public string GetMovieTitle() => newMovieTitle;
    public int GetMovieYear() => newMovieYear;
    public string GetMovieCategory() => newMovieCategory;
    public string GetMovieType() => newMovieType;
    public int GetMovieDirectorId() => newMovieDirectorId;
    public int GetMovieScreenWriterId() => newMovieScreenWriterId;
    public int GetDeleteMovieId() => deletingMovieId;
    public List<int> GetMovieActorIds()
    {
        return newMovieActorIds.Split(',')
            .Where(id => int.TryParse(id.Trim(), out _))
            .Select(id => int.Parse(id.Trim()))
            .ToList();
    }

 
    public string GetMoviePhoto1() => newMovieImageUrl1;
    public string GetMoviePhoto2() => newMovieImageUrl2;
    public string GetMoviePhoto3() => newMovieImageUrl3;
}