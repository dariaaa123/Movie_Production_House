@page "/movies"
@using Tema1PS.Presenter
@implements IMovieGUI
@inject MoviePresenter MoviePresenter
@rendermode InteractiveServer

<h1>Movies</h1>

@if (movies == null)
{
    <p>Loading movies...</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>Title</th>
            <th>Year</th>
            <th>Category</th>
            <th>Type</th>
            <th>Director</th>
            <th>Screenwriter</th>
            <th>Actors</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var movie in movies)
        {
            <tr>
                <td>@movie.Id</td>
                <td>@movie.Title</td>
                <td>@movie.Year</td>
                <td>@movie.Category</td>
                <td>@movie.Type</td>
                <td>@movie.DirectorName</td>
                <td>@movie.ScreenWriterName</td>
                <td>@string.Join(", ", movie.ActorNames)</td>
                <td>
                    <button class="btn btn-warning" @onclick="() => EditMovie(movie)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteMovie(movie.Id)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<h3>@(editingMovieId == 0 ? "Add New Movie" : "Edit Movie")</h3>
<div>
    <input @bind="newMovieTitle" placeholder="Enter movie title" />
    <input type="number" @bind="newMovieYear" placeholder="Enter year" />
    <input @bind="newMovieCategory" placeholder="Enter category" />
    <input @bind="newMovieType" placeholder="Enter type" />
    <input type="number" @bind="newMovieDirectorId" placeholder="Enter director ID" />
    <input type="number" @bind="newMovieScreenWriterId" placeholder="Enter screenwriter ID" />
    <input @bind="newMovieActorIds" placeholder="Enter actor IDs (comma-separated)" />

    @if (editingMovieId == 0)
    {
        <button class="btn btn-primary ml-3" @onclick="AddMovie">Add</button>

    }
    else
    {
        <button class="btn btn-success" @onclick="UpdateMovie">Update</button>
        <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
    }
</div>

@code {
    private List<MovieDTO> movies = new();
    private string newMovieTitle = string.Empty;
    private string newMovieCategory = string.Empty;
    private string newMovieType = string.Empty;
    private int newMovieYear;
    private int newMovieDirectorId;
    private int newMovieScreenWriterId;
    private string newMovieActorIds = string.Empty;

    private int editingMovieId = 0;

    private int deletingMovieId = 0;

    protected override async Task OnInitializedAsync()
    {
        MoviePresenter.SetMovieGUI(this); // ✅ Assign the Blazor component instance to MoviePresenter
        await LoadMovies();
    }

    private async Task LoadMovies()
    {
        movies = await MoviePresenter.GetMoviesAsync();
    }

    private async Task AddMovie()
    {
        await MoviePresenter.AddMovieAsync();
        await LoadMovies();
        ResetFields();
    }

    private void EditMovie(MovieDTO movie)
    {
        editingMovieId = movie.Id;
        newMovieTitle = movie.Title;
        newMovieYear = movie.Year;
        newMovieCategory = movie.Category;
        newMovieType = movie.Type;
        newMovieDirectorId = movie.DirectorId;
        newMovieScreenWriterId = movie.ScreenWriterId;
        newMovieActorIds = string.Join(", ", movie.ActorIds);
    }

    private async Task UpdateMovie()
    {
        await MoviePresenter.UpdateMovieAsync(); // No parameters!
        await LoadMovies();
        ResetFields();
    }

    private async Task DeleteMovie(int id)
    {
        deletingMovieId = id;
        await MoviePresenter.DeleteMovieAsync();
        await LoadMovies();
    }

    private void CancelEdit()
    {
        ResetFields();
    }

    private void ResetFields()
    {
        deletingMovieId = 0;
        editingMovieId = 0;
        newMovieTitle = string.Empty;
        newMovieYear = 0;
        newMovieCategory = string.Empty;
        newMovieType = string.Empty;
        newMovieDirectorId = 0;
        newMovieScreenWriterId = 0;
        newMovieActorIds = string.Empty;
    }

    // IMovieGUI Implementation

    public int GetMovieId() => editingMovieId;
    public string GetMovieTitle() => newMovieTitle;
    public int GetMovieYear() => newMovieYear;
    public string GetMovieCategory() => newMovieCategory;
    public string GetMovieType() => newMovieType;
    public int GetMovieDirectorId() => newMovieDirectorId;
    public int GetMovieScreenWriterId() => newMovieScreenWriterId;
    public int GetDeleteMovieId() => deletingMovieId;
    public List<int> GetMovieActorIds()
    {
        return newMovieActorIds.Split(',')
            .Where(id => int.TryParse(id.Trim(), out _))
            .Select(id => int.Parse(id.Trim()))
            .ToList();
    }
}
