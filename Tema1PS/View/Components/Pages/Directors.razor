@page "/employees/directors"
@using Tema1PS.Presenter
@inject DirectorPresenter DirectorPresenter

@rendermode InteractiveServer

<PageTitle>Directors</PageTitle>

<h1>Directors</h1>

@if (directors == null)
{
    <p>Loading directors...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var director in directors)
            {
                <tr>
                    <td>@director.Id</td>
                    <td>
                        @if (editingDirectorId == director.Id)
                        {
                            <input @bind="editingDirectorName" />
                        }
                        else
                        {
                            @director.Name
                        }
                    </td>
                    <td>
                        @if (editingDirectorId == director.Id)
                        {
                            <button class="btn btn-success" @onclick="() => SaveEdit(director.Id)">Save</button>
                            <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        }
                        else
                        {
                            <button class="btn btn-warning" @onclick="() => EditDirector(director.Id, director.Name)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteDirector(director.Id)">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<h3>Add New Director</h3>
<div>
    <input @bind="newDirectorName" placeholder="Enter director name" />
    <button class="btn btn-primary" @onclick="AddDirector">Add</button>
</div>

@code {
    private List<DirectorDTO> directors = new();
    private string newDirectorName = string.Empty;
    private int editingDirectorId = 0;
    private string editingDirectorName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadDirectors();
    }

    private async Task LoadDirectors()
    {
        directors = await DirectorPresenter.GetEmployeesAsync();
    }

    private async Task AddDirector()
    {
        Console.WriteLine("Add button clicked");
        if (!string.IsNullOrWhiteSpace(newDirectorName))
        {
            await DirectorPresenter.AddEmployeeAsync(newDirectorName);
            newDirectorName = string.Empty;
            await LoadDirectors();
        }
    }

    private void EditDirector(int id, string name)
    {
        editingDirectorId = id;
        editingDirectorName = name;
    }

    private async Task SaveEdit(int id)
    {
        if (!string.IsNullOrWhiteSpace(editingDirectorName))
        {
            await DirectorPresenter.UpdateEmployeeAsync(id, editingDirectorName);
            editingDirectorId = 0;
            await LoadDirectors();
        }
    }

    private void CancelEdit()
    {
        editingDirectorId = 0;
    }

    private async Task DeleteDirector(int id)
    {
        await DirectorPresenter.DeleteEmployeeAsync(id);
        await LoadDirectors();
    }
}
